{%- set system_cacerts_file = salt['grains.filter_by']({
    'Debian': '/etc/ssl/certs/ca-certificates.crt',
    'RedHat': '/etc/pki/tls/certs/ca-bundle.crt'
})%}

{% set compute_bind_defaults = {
    'vnc_address': '10.0.0.10',
    'vnc_port': '6080',
    'vnc_name': 'cloud.domain.com',
    'vnc_protocol': 'http',
} %}

{% set controller = salt['grains.filter_by']({
    'Debian': {
        'pkgs': ['nova-common', 'nova-consoleproxy', 'novnc', 'nova-api', 'nova-cert', 'nova-conductor', 'nova-consoleauth', 'nova-doc', 'nova-scheduler', 'python-novaclient', 'python-memcache', 'gettext-base', 'python-pycadf'],
        'services': ['nova-api', 'nova-cert', 'nova-consoleauth', 'nova-scheduler', 'nova-conductor', 'nova-novncproxy'],
        'debug': false,
        'notification': false,
        'cors': {},
        'audit': {
          'enabled': false
        },
    },
    'RedHat': {
        'pkgs': ['openstack-nova-novncproxy', 'python-nova', 'openstack-nova-api', 'openstack-nova-console', 'openstack-nova-scheduler', 'python-novaclient', 'openstack-nova-common', 'openstack-nova-conductor', 'openstack-nova-cert', 'python-pycadf'],
        'services': ['openstack-nova-api', 'openstack-nova-cert', 'openstack-nova-consoleauth', 'openstack-nova-scheduler', 'openstack-nova-conductor', 'openstack-nova-novncproxy'],
        'debug': false,
        'notification': false,
        'cors': {},
        'audit': {
          'enabled': false
        },
    },
}, merge=pillar.nova.get('controller', {})) %}


{% set client = salt['grains.filter_by']({
    'Debian': {
        'pkgs': ['python-novaclient']
    },
    'RedHat': {
        'pkgs': ['python-novaclient']
    },
}, merge=pillar.nova.get('client', {})) %}

{%- load_yaml as compute_defaults %}
Debian:
  pkgs:
  - nova-common
  - nova-compute-kvm
  - python-novaclient
  - pm-utils
  - sysfsutils
  - sg3-utils
  - libvirt-bin
  - python-memcache
  - qemu-kvm
  - python-guestfs
  - gettext-base
  {%- if pillar.nova.compute is defined and pillar.nova.compute.get('networking', 'default') == "contrail" and pillar.nova.compute.get('version', 'ocata') not in ["juno", "kilo", "liberty", "mitaka", "newton"] %}
  - contrail-nova-driver
  {%- endif %}
  services:
  - nova-compute
  libvirt_config: libvirtd.conf
  libvirt_bin: "/etc/default/libvirt-bin"
  libvirt_service: libvirt-bin
  bind: compute_bind_defaults
  debug: false
  libvirt: []
  instances_path: "$state_path/instances"
  notification: false
  availability_zone:
  aggregates: []
  identity:
    region: RegionOne
  network:
    region: RegionOne
  heal_instance_info_cache_interval: '60'
RedHat:
  pkgs:
  - openstack-nova-compute
  - python-novaclient
  - python-nova
  - sysfsutils
  - sg3_utils
  services:
  - messagebus
  - openstack-nova-compute
  - libvirtd
  libvirt_config: libvirt.conf
  libvirt_bin: "/etc/sysconfig/libvirtd"
  libvirt_service: libvirtd
  bind: compute_bind_defaults
  debug: false
  libvirt: []
  notification: false
  availability_zone:
  identity:
    region: RegionOne
  network:
    region: RegionOne
  heal_instance_info_cache_interval: '60'
{%- endload %}

{% set compute = salt["grains.filter_by"](compute_defaults, merge=pillar.nova.get("compute", {})) %}

{% set monitoring = salt['grains.filter_by']({
    'default': {
        'disk': {
              'warn': '15%',
              'crit': '5%',
        },
        'error_log_rate': {
              'warn': 0.2,
        },
        'services_failed_warning_threshold_percent': 0.3,
        'services_failed_critical_threshold_percent': 0.6,
        'computes_failed_warning_threshold_percent': 0.25,
        'computes_failed_critical_threshold_percent': 0.5,
    },
}, grain='os_family', merge=salt['pillar.get']('nova:monitoring')) %}
